// Generated by CIRCT firtool-1.62.0
module LSZ(
  input  [9:0] io_in,
  output [3:0] io_lszIdx
);

  assign io_lszIdx =
    io_in[0]
      ? (io_in[1]
           ? (io_in[2]
                ? (io_in[3]
                     ? (io_in[4]
                          ? (io_in[5]
                               ? (io_in[6] ? (io_in[7] ? {3'h4, io_in[8]} : 4'h7) : 4'h6)
                               : 4'h5)
                          : 4'h4)
                     : 4'h3)
                : 4'h2)
           : 4'h1)
      : 4'h0;
endmodule

module SobolRNG(
  input        clock,
               reset,
               io_en,
  input  [3:0] io_vecIdx,
  output [9:0] io_out
);

  reg [9:0] reg_0;
  always @(posedge clock) begin
    if (reset)
      reg_0 <= 10'h0;
    else begin
      automatic logic [15:0][9:0] _GEN =
        '{10'h200,
          10'h200,
          10'h200,
          10'h200,
          10'h200,
          10'h200,
          10'h1,
          10'h2,
          10'h4,
          10'h8,
          10'h10,
          10'h20,
          10'h40,
          10'h80,
          10'h100,
          10'h200};
      reg_0 <= {10{io_en}} & _GEN[io_vecIdx] ^ reg_0;
    end
  end // always @(posedge)
  assign io_out = reg_0;
endmodule

module SobolRNGDim1(
  input        clock,
               reset,
               io_en,
  output [9:0] io_sobolSeq
);

  wire [3:0] _lsz_io_lszIdx;
  reg  [9:0] cnt;
  always @(posedge clock) begin
    if (reset)
      cnt <= 10'h0;
    else if (io_en)
      cnt <= cnt + 10'h1;
  end // always @(posedge)
  LSZ lsz (
    .io_in     (cnt),
    .io_lszIdx (_lsz_io_lszIdx)
  );
  SobolRNG sobolRNG (
    .clock     (clock),
    .reset     (reset),
    .io_en     (io_en),
    .io_vecIdx (_lsz_io_lszIdx),
    .io_out    (io_sobolSeq)
  );
endmodule

module uMUL(
  input        clock,
               reset,
               io_iA,
  input  [9:0] io_iB,
  output       io_oC
);

  wire [9:0] _rng_io_sobolSeq;
  reg  [9:0] iBBuf;
  always @(posedge clock) begin
    if (reset)
      iBBuf <= 10'h0;
    else
      iBBuf <= io_iB;
  end // always @(posedge)
  SobolRNGDim1 rng (
    .clock       (clock),
    .reset       (reset),
    .io_en       (io_iA),
    .io_sobolSeq (_rng_io_sobolSeq)
  );
  assign io_oC = io_iA & iBBuf > _rng_io_sobolSeq;
endmodule

module uSADD(
  input        clock,
               reset,
  input  [1:0] io_in,
  output       io_out
);

  reg        acc;
  wire [1:0] _accNext_T = {1'h0, acc} + {1'h0, io_in[0]} + {1'h0, io_in[1]};
  always @(posedge clock) begin
    if (reset)
      acc <= 1'h0;
    else
      acc <= _accNext_T[0];
  end // always @(posedge)
  assign io_out = _accNext_T[1];
endmodule

module uTestCircuit(
  input        clock,
               reset,
               io_in,
  input  [9:0] io_sobolSeq,
  output       io_out
);

  wire _add1_io_out;
  wire _mul1_io_oC;
  uMUL mul1 (
    .clock (clock),
    .reset (reset),
    .io_iA (io_in),
    .io_iB (10'hC6),
    .io_oC (_mul1_io_oC)
  );
  uSADD add1 (
    .clock  (clock),
    .reset  (reset),
    .io_in  ({io_sobolSeq < 10'h3, _mul1_io_oC}),
    .io_out (_add1_io_out)
  );
  uMUL mul2 (
    .clock (clock),
    .reset (reset),
    .io_iA (_add1_io_out),
    .io_iB (10'h4),
    .io_oC (io_out)
  );
endmodule

module uTestCircuitRepeat(
  input  clock,
         reset,
         io_in,
  output io_out
);

  wire [9:0] _rng_io_sobolSeq;
  SobolRNGDim1 rng (
    .clock       (clock),
    .reset       (reset),
    .io_en       (1'h1),
    .io_sobolSeq (_rng_io_sobolSeq)
  );
  uTestCircuit baseline (
    .clock       (clock),
    .reset       (reset),
    .io_in       (io_in),
    .io_sobolSeq (_rng_io_sobolSeq),
    .io_out      (io_out)
  );
endmodule

